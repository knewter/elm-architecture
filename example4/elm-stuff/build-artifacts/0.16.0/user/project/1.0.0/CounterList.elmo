Elm.CounterList = Elm.CounterList || {};
Elm.CounterList.make = function (_elm) {
   "use strict";
   _elm.CounterList = _elm.CounterList || {};
   if (_elm.CounterList.values) return _elm.CounterList.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Counter = Elm.Counter.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var update = F2(function (action,model) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "Insert": var newCounter = {ctor: "_Tuple2",_0: model.nextID,_1: $Counter.init(0)};
           var newCounters = A2($Basics._op["++"],model.counters,_U.list([newCounter]));
           return _U.update(model,{counters: newCounters,nextID: model.nextID + 1});
         case "Remove": return _U.update(model,{counters: A2($List.drop,1,model.counters)});
         default: var updateCounter = function (_p1) {
              var _p2 = _p1;
              var _p4 = _p2._1;
              var _p3 = _p2._0;
              return _U.eq(_p3,_p0._0) ? {ctor: "_Tuple2",_0: _p3,_1: A2($Counter.update,_p0._1,_p4)} : {ctor: "_Tuple2",_0: _p3,_1: _p4};
           };
           return _U.update(model,{counters: A2($List.map,updateCounter,model.counters)});}
   });
   var Modify = F2(function (a,b) {    return {ctor: "Modify",_0: a,_1: b};});
   var viewCounter = F2(function (address,_p5) {    var _p6 = _p5;return A2($Counter.view,A2($Signal.forwardTo,address,Modify(_p6._0)),_p6._1);});
   var Remove = {ctor: "Remove"};
   var Insert = {ctor: "Insert"};
   var view = F2(function (address,model) {
      var insert = A2($Html.button,_U.list([A2($Html$Events.onClick,address,Insert)]),_U.list([$Html.text("Add")]));
      var remove = A2($Html.button,_U.list([A2($Html$Events.onClick,address,Remove)]),_U.list([$Html.text("Remove")]));
      var counters = A2($List.map,viewCounter(address),model.counters);
      return A2($Html.div,_U.list([]),A2($Basics._op["++"],_U.list([remove,insert]),counters));
   });
   var init = {counters: _U.list([]),nextID: 0};
   var Model = F2(function (a,b) {    return {counters: a,nextID: b};});
   return _elm.CounterList.values = {_op: _op
                                    ,Model: Model
                                    ,init: init
                                    ,Insert: Insert
                                    ,Remove: Remove
                                    ,Modify: Modify
                                    ,update: update
                                    ,view: view
                                    ,viewCounter: viewCounter};
};